/* File:gnv_bzip2.c_first */

#define NEED_PIPE_EOF
#include "vms_main_wrapper.c"

#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
static char * vms_getenv(const char * env_name) {

    char * name;
    char * shell;
    char * name_opts;
    char env_name_opts[256];

    if (env_name == NULL) {
        errno = EINVAL;
        return NULL;
    }
    shell = getenv("SHELL");
    name = getenv(env_name);
    strncpy(env_name_opts, env_name, 256 - 5);
    env_name_opts[256 - 5] = 0;
    strcat(env_name_opts, "_opts");
    name_opts = getenv(env_name_opts);

    if (shell == NULL) {
    /* DCL behavior, name_opts takes precedence */
        if (name_opts != NULL) {
            return name_opts;
        }
        /* Filter out foreign commands */
        if ((name != NULL) && (name[0] != '$')) {
            return name;
        }
    } else {
        /* GNV behavior, name takes precedence */
        if ((name != NULL) && (name[0] != '$')) {
            return name;
        }
        if (name_opts != NULL) {
            return name_opts;
        }
    }
    return NULL;
}

#define getenv vms_getenv


/* Some of this from Steven Schweda port */

#if defined( __VAX) || (__CRTL_VER < 80300000)

#include <errno.h>
#include <stat.h>
#include <stdlib.h>
#include <unixio.h>

#include <nam.h>

#ifdef NAML$C_MAXRSS /* ODS-5 support present */
#  define NAM_MAXRSS NAML$C_MAXRSS
#else
#  define NAM_MAXRSS NAM$C_MAXRSS
#endif

#define lstat(file, buf) stat(file, buf)

static int vms_fchmod(int fd, mode_t mode) {
    char * filename;
    char * ret_stat;
    int status;
    int save_errno;

    status = -1;
    filename = malloc(NAM_MAXRSS + 1);
    if (filename == NULL) {
        return -1;
    }
    ret_stat = getname(fd, filename);
    if (ret_stat != NULL) {
        status = chmod(filename, mode);
    }
    save_errno = errno;
    free(filename);
    errno = save_errno;
    return status;
}

#define fchmod vms_fchmod

#endif

#include "vms_lstat_hack.h"

#include "vms_bzip2_fopen_hack.h"

void vms_redot(char *file_spec);

char *vms_wild(char *file_spec, int *wild);

static void trimFileNameVersion( char *file_name ) {
   char *cp;

   /* Find the first (apparent) non-version-digit. */
   for (cp = file_name+ strlen( file_name)- 1;
        (*cp >= '0') && (*cp <= '9') && (cp != file_name);
        cp--);

   /* If the pre-digit character exists and is an unescaped
      semi-colon, then terminate the string at the semi-colon.
   */
   if (cp != file_name) {
      if ((*cp == ';') && (*(cp- 1) != '^')) {
         *cp = '\0';
      }
   }
   return;
}

static size_t vms_bzip2_fwrite(const void *ptr, size_t item_size,
                               size_t item_cnt, FILE *fp) {
    int status;
    if (item_size == 1) {
        status = fwrite(ptr, item_cnt, item_size, fp);
    } else {
        status = fwrite(ptr, item_size, item_cnt, fp);
    }
    return status;
}

#define fwrite vms_bzip2_fwrite
